package com.yupi.springbootinit.config;

import lombok.Data;
import org.jetbrains.annotations.NotNull;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

@Configuration
@ConfigurationProperties(prefix = "spring.thread-pool")
@Data
public class ThreadPoolExecutorConfig {

        private Integer corePoolSize;

        private Integer maxPoolSize;

        private Integer queueCapacity;

        private Integer keepAliveSeconds;

        private String threadNamePrefix;

        @Bean
        public ThreadPoolExecutor threadPoolExecutor() {
            ThreadFactory threadFactory = new ThreadFactory() {
                private int count = 1;

                @Override
                public Thread newThread(@NotNull Runnable r) {
                    Thread thread = new Thread(r);
                    thread.setName("线程" + count);
                    count++;
                    return thread;
                }
            };

            ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(2, 4, 100, TimeUnit.SECONDS,
                    new ArrayBlockingQueue<>(4), threadFactory);

            return threadPoolExecutor;
        }

        //These will be generated by the threadPoolExecutor itself
//        public Integer getCorePoolSize() {
//            return corePoolSize;
//        }
//
//        public void setCorePoolSize(Integer corePoolSize) {
//            this.corePoolSize = corePoolSize;
//        }
//
//        public Integer getMaxPoolSize() {
//            return maxPoolSize;
//        }
//
//        public void setMaxPoolSize(Integer maxPoolSize) {
//            this.maxPoolSize = maxPoolSize;
//        }
//
//        public Integer getQueueCapacity() {
//            return queueCapacity;
//        }
//
//        public void setQueueCapacity(Integer queueCapacity) {
//            this.queueCapacity = queueCapacity;
//        }
//
//        public Integer getKeepAliveSeconds() {
//            return keepAliveSeconds;
//        }
//
//        public void setKeepAliveSeconds(Integer keepAliveSeconds) {
//            this.keepAliveSeconds = keepAliveSeconds;
//        }
//
//        public String getThreadNamePrefix() {
//            return threadNamePrefix;
//        }
//
//        public void setThreadNamePrefix(String threadNamePrefix) {
//            this.threadNamePrefix = threadNamePrefix;
//        }
}
